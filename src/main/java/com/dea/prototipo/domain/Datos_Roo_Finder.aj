// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dea.prototipo.domain;

import com.dea.prototipo.domain.Bodega;
import com.dea.prototipo.domain.Datos;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Datos_Roo_Finder {
    
    public static Long Datos.countFindDatosesByBodega(Bodega bodega) {
        if (bodega == null) throw new IllegalArgumentException("The bodega argument is required");
        EntityManager em = Datos.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Datos AS o WHERE o.bodega = :bodega", Long.class);
        q.setParameter("bodega", bodega);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Datos> Datos.findDatosesByBodega(Bodega bodega) {
        if (bodega == null) throw new IllegalArgumentException("The bodega argument is required");
        EntityManager em = Datos.entityManager();
        TypedQuery<Datos> q = em.createQuery("SELECT o FROM Datos AS o WHERE o.bodega = :bodega", Datos.class);
        q.setParameter("bodega", bodega);
        return q;
    }
    
    public static TypedQuery<Datos> Datos.findDatosesByBodega(Bodega bodega, String sortFieldName, String sortOrder) {
        if (bodega == null) throw new IllegalArgumentException("The bodega argument is required");
        EntityManager em = Datos.entityManager();
        String jpaQuery = "SELECT o FROM Datos AS o WHERE o.bodega = :bodega";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Datos> q = em.createQuery(jpaQuery, Datos.class);
        q.setParameter("bodega", bodega);
        return q;
    }
    
}
